diff --git a/htmltopdf/main.cpp b/htmltopdf/main.cpp
index 9a23679d..55327fd7 100644
--- a/htmltopdf/main.cpp
+++ b/htmltopdf/main.cpp
@@ -24,6 +24,7 @@
 #include <QApplication>
 #include <QCommandLineParser>
 #include <QProcessEnvironment>
+#include <QLibraryInfo>
 
 bool isWayland();
 
@@ -33,10 +34,22 @@ int main(int argc, char *argv[])
     QApplication::setApplicationName("html2pdf");
     QApplication::setApplicationVersion("v1.0");
 
+    qputenv("QTWEBENGINERESOURCE_PATH", "/opt/apps/org.deepin.reader/files/share/qt5/translations:/opt/apps/org.deepin.reader/files/share/qt5/resources");
+    QString evnValue = QString("/opt/apps/org.deepin.reader/files/lib") + QLibraryInfo::location(QLibraryInfo::LibrariesPath).mid(
+                           QLibraryInfo::location(QLibraryInfo::LibrariesPath).lastIndexOf("/")) + QString("/qt5/libexec/QtWebEngineProcess");
+    qputenv("QTWEBENGINEPROCESS_PATH", evnValue.toLocal8Bit());
+    printf("- %s\n", qgetenv("QTWEBENGINERESOURCE_PATH").data());
+    printf("- %s\n", qgetenv("QTWEBENGINEPROCESS_PATH").data());
+
+
     if (isWayland()) {
         // 解决klu panguV平台使用QWebEnginePage崩溃的问题，不支持gpu渲染
         qputenv("QTWEBENGINE_CHROMIUM_FLAGS", "--disable-gpu");
     }
+    qputenv("QTWEBENGINE_REMOTE_DEBUGGING", "7777");
+    //v23 玲珑需要加上此参数
+    qputenv("QTWEBENGINE_CHROMIUM_FLAGS", "--no-sandbox");
+
     // 解决__sw_64__平台使用QWebEnginePage崩溃的问题
 #ifdef __sw_64__
     qputenv("QTWEBENGINE_CHROMIUM_FLAGS", "--no-sandbox");
diff --git a/reader/Application.cpp b/reader/Application.cpp
index add273a6..c40cf91f 100644
--- a/reader/Application.cpp
+++ b/reader/Application.cpp
@@ -34,7 +34,7 @@ Application::Application(int &argc, char **argv)
     setApplicationName("deepin-reader");
     setOrganizationName("deepin");
     //setWindowIcon(QIcon::fromTheme("deepin-reader"));     //耗时40ms
-    setApplicationVersion(DApplication::buildVersion("1.0.0"));
+    setApplicationVersion(DApplication::buildVersion(APP_VERSION));
     setApplicationAcknowledgementPage("https://www.deepin.org/acknowledgments/deepin_reader");
     setApplicationDisplayName(tr("Document Viewer"));
     setApplicationDescription(tr("Document Viewer is a tool for reading document files, supporting PDF, DJVU, DOCX etc."));
diff --git a/reader/document/Model.cpp b/reader/document/Model.cpp
index ec90b030..885fe038 100755
--- a/reader/document/Model.cpp
+++ b/reader/document/Model.cpp
@@ -37,6 +37,17 @@ deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &
         QString tmpHtmlFilePath = convertedFileDir + "/word/temp.html";
         QString realFilePath = convertedFileDir + "/temp.pdf";
 
+        QDir convertedDir(convertedFileDir);
+        if (!convertedDir.exists()) {
+            bool flag = convertedDir.mkdir(convertedFileDir);
+            qDebug() << "创建文件夹" << convertedFileDir << "是否成功？" << flag;
+        } else {
+            qDebug() << "文件夹" << convertedFileDir << "已经存在！";
+        }
+        qDebug() << "targetDoc: " << targetDoc;
+        qDebug() << "tmpHtmlFilePath: " << tmpHtmlFilePath;
+        qDebug() << "realFilePath: " << realFilePath;
+
         QFile file(filePath);
         if (!file.copy(targetDoc)) {
             qInfo() << QString("copy %1 failed.").arg(filePath);
@@ -79,6 +90,12 @@ deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &
         *pprocess = &converter;
         converter.setWorkingDirectory(convertedFileDir + "/word");
         qDebug() << "正在将docx文档转换成html..." << tmpHtmlFilePath;
+        QFile targetDocFile(targetDoc);
+        if (targetDocFile.exists()) {
+            qDebug() << "文档" << targetDocFile.fileName() << "存在！";
+        } else {
+            qDebug() << "文档" << targetDocFile.fileName() << "不存在！";
+        }
         QString pandocCommand = "pandoc " +  targetDoc + " -o " + tmpHtmlFilePath;
         qDebug() << "执行命令: " << pandocCommand;
         converter.start(pandocCommand);
@@ -111,16 +128,48 @@ deepin_reader::Document *deepin_reader::DocumentFactory::getDocument(const int &
         *pprocess = &converter2;
         converter2.setWorkingDirectory(convertedFileDir + "/word");
         qDebug() << "正在将html转换成pdf..." << realFilePath;
-        QString htmltopdfCommand = "/usr/lib/deepin-reader/htmltopdf " +  tmpHtmlFilePath + " " + realFilePath;
-        qDebug() << "执行命令: " << htmltopdfCommand;
+        QDir dir;
+        QStringList environment = QProcess::systemEnvironment();
+        QString str, t_str;
+        foreach (str, environment) {
+            if (str.startsWith("LD_LIBRARY_PATH=")) {
+                t_str = str;
+                break;
+            }
+        }
+        qDebug() << "LD_LIBRARY_PATH:" << t_str;
+        QStringList liststr = t_str.split("=").at(1).split(":");
+        QString t_libPath;
+        for (size_t i = 0; i < liststr.count() ; i++) {
+            QString path  = liststr.at(i) + "/deepin-reader";
+            dir.setPath(path);
+            if (!dir.exists()) {
+                continue;
+            }
+            QStringList list = dir.entryList(QStringList() << "htmltopdf", QDir::NoDotAndDotDot | QDir::Files); //filter name with strlib
+            if (!list.isEmpty()) {
+                t_libPath = path + "/" + list.first();
+                break;
+            }
+        }
+        QFile tmpHtmlFile1(tmpHtmlFilePath);
+        if (tmpHtmlFile1.exists()) {
+            qDebug() << "文档" << tmpHtmlFile1.fileName() << "存在！";
+        } else {
+            qDebug() << "文档" << tmpHtmlFile1.fileName() << "不存在！";
+        }
+        qDebug() << "htmltopdf: " << t_libPath;
+        QString htmltopdfCommand = t_libPath + " " +  tmpHtmlFilePath + " " + realFilePath;
         converter2.start(htmltopdfCommand);
-        if (!converter2.waitForStarted()) {
+        qDebug() << "执行命令: " << htmltopdfCommand;
+
+        if (!converter2.waitForStarted(1000000)) {
             qInfo() << "start htmltopdf failed";
             error = deepin_reader::Document::ConvertFailed;
             *pprocess = nullptr;
             return nullptr;
         }
-        if (!converter2.waitForFinished()) {
+        if (!converter2.waitForFinished(1000000)) {
             qInfo() << "htmltopdf failed";
             error = deepin_reader::Document::ConvertFailed;
             *pprocess = nullptr;
diff --git a/reader/reader.pro b/reader/reader.pro
index 1a6bc444..fefda1b9 100755
--- a/reader/reader.pro
+++ b/reader/reader.pro
@@ -21,7 +21,8 @@ QMAKE_CXXFLAGS += -fPIE
 
 QMAKE_LFLAGS += -pie
 
-VERSION=$(DEB_VERSION_UPSTREAM)
+DEFINES += APP_VERSION=\\\"$$VERSION\\\"
+message("APP_VERSION: "$$VERSION)
 
 contains(QMAKE_HOST.arch, mips64):{
     QMAKE_CXXFLAGS += "-O3 -ftree-vectorize -march=loongson3a -mhard-float -mno-micromips -mno-mips16 -flax-vector-conversions -mloongson-ext2 -mloongson-mmi"
diff --git a/tests/tests.pro b/tests/tests.pro
index 314cad22..da6b1dcf 100644
--- a/tests/tests.pro
+++ b/tests/tests.pro
@@ -28,6 +28,9 @@ DEFINES += UTSOURCEDIR=\"\\\"$$PWD\\\"\"
 
 LIBS += -lgtest
 
+DEFINES += APP_VERSION=\\\"$$VERSION\\\"
+message("APP_VERSION: "$$VERSION)
+
 #target
 TARGET = test-deepin-reader
 
